var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import {visit} from "unist-util-visit";
function remarkCodeBlock() {
  return function(tree) {
    visit(tree, "code", (node) => {
      var _a, _b;
      const {data, meta} = node;
      let lang = node.lang || "html";
      let currentClassName = (_b = (_a = data == null ? void 0 : data.hProperties) == null ? void 0 : _a.class) != null ? _b : "";
      node.data = node.data || {};
      node.data.hProperties = node.data.hProperties || {};
      node.data.hProperties = __spreadProps(__spreadValues({}, node.data.hProperties), {class: `language-${lang} ${currentClassName}`.trim(), lang, meta});
    });
  };
}
function rehypeCodeBlock() {
  return function(tree) {
    const escapeCode = (code) => {
      code.children = code.children.map((child) => {
        if (child.type === "text") {
          return __spreadProps(__spreadValues({}, child), {value: child.value.replace(/\{/g, "ASTRO_ESCAPED_LEFT_CURLY_BRACKET\0")});
        }
        return child;
      });
    };
    visit(tree, "element", (node) => {
      if (node.tagName === "code") {
        escapeCode(node);
        return;
      }
      if (node.tagName !== "pre")
        return;
      const code = node.children[0];
      if (code.type !== "element" || code.tagName !== "code")
        return;
      node.properties = __spreadValues({}, code.properties);
    });
  };
}
export {
  rehypeCodeBlock,
  remarkCodeBlock
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2NvZGVibG9jay50cyJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUtPLDJCQUEyQjtBQUNoQyxTQUFPLFNBQVUsTUFBaUI7QUFDaEMsVUFBTSxNQUFNLFFBQVEsQ0FBQyxTQUFTO0FBUGxDO0FBUU0sWUFBTSxDQUFFLE1BQU0sUUFBUztBQUN2QixVQUFJLE9BQU8sS0FBSyxRQUFRO0FBRXhCLFVBQUksbUJBQW9CLHlDQUFNLGdCQUFOLG1CQUFrQyxVQUFsQyxZQUEyQztBQUNuRSxXQUFLLE9BQU8sS0FBSyxRQUFRO0FBQ3pCLFdBQUssS0FBSyxjQUFjLEtBQUssS0FBSyxlQUFlO0FBQ2pELFdBQUssS0FBSyxjQUFjLGlDQUFNLEtBQUssS0FBSyxjQUFoQixDQUE0QyxPQUFPLFlBQVksUUFBUSxtQkFBbUIsUUFBUSxNQUFNO0FBQUE7QUFBQTtBQUFBO0FBTS9ILDJCQUEyQjtBQUNoQyxTQUFPLFNBQVUsTUFBZ0I7QUFDL0IsVUFBTSxhQUFhLENBQUMsU0FBd0I7QUFDMUMsV0FBSyxXQUFXLEtBQUssU0FBUyxJQUFJLENBQUMsVUFBVTtBQUMzQyxZQUFJLE1BQU0sU0FBUyxRQUFRO0FBQ3pCLGlCQUFPLGlDQUFLLFFBQUwsQ0FBWSxPQUFPLE1BQU0sTUFBTSxRQUFRLE9BQU87QUFBQTtBQUV2RCxlQUFPO0FBQUE7QUFBQTtBQUdYLFVBQU0sTUFBTSxXQUFXLENBQUMsU0FBUztBQUMvQixVQUFJLEtBQUssWUFBWSxRQUFRO0FBQzNCLG1CQUFXO0FBQ1g7QUFBQTtBQUdGLFVBQUksS0FBSyxZQUFZO0FBQU87QUFDNUIsWUFBTSxPQUFPLEtBQUssU0FBUztBQUMzQixVQUFJLEtBQUssU0FBUyxhQUFhLEtBQUssWUFBWTtBQUFRO0FBQ3hELFdBQUssYUFBYSxtQkFBSyxLQUFLO0FBQUE7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
