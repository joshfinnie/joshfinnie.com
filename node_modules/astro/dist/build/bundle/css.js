import {performance} from "perf_hooks";
import shorthash from "shorthash";
import cheerio from "cheerio";
import esbuild from "esbuild";
import {getDistPath, getSrcPath, IS_ASTRO_FILE_URL, stopTimer} from "../util.js";
import {debug} from "../../logger.js";
const COMMON_URL = `/_astro/common-[HASH].css`;
async function bundleCSS({
  astroConfig,
  buildState,
  logging,
  depTree
}) {
  const timer = {};
  const cssMap = new Map();
  timer.bundle = performance.now();
  const sortedPages = Object.keys(depTree);
  sortedPages.sort((a, b) => a.localeCompare(b, "en", {numeric: true}));
  for (const pageUrl of sortedPages) {
    const {css} = depTree[pageUrl];
    for (const cssUrl of css.keys()) {
      if (!IS_ASTRO_FILE_URL.test(cssUrl)) {
      } else if (cssMap.has(cssUrl)) {
        cssMap.set(cssUrl, COMMON_URL);
      } else {
        cssMap.set(cssUrl, "/_astro" + pageUrl.replace(/.html$/, "").replace(/^\./, "") + "-[HASH].css");
      }
    }
  }
  timer.bundle = performance.now();
  for (const id of cssMap.keys()) {
    const newUrl = cssMap.get(id);
    if (!buildState[newUrl]) {
      buildState[newUrl] = {
        srcPath: getSrcPath(id, {astroConfig}),
        contents: "",
        contentType: "text/css",
        encoding: "utf8"
      };
    }
    buildState[newUrl].contents += Buffer.isBuffer(buildState[id].contents) ? buildState[id].contents.toString("utf8") : buildState[id].contents;
    delete buildState[id];
  }
  debug(logging, "css", `bundled [${stopTimer(timer.bundle)}]`);
  timer.minify = performance.now();
  await Promise.all(Object.keys(buildState).map(async (id) => {
    if (buildState[id].contentType !== "text/css")
      return;
    const {code} = await esbuild.transform(buildState[id].contents.toString(), {
      loader: "css",
      minify: true
    });
    buildState[id].contents = code;
  }));
  debug(logging, "css", `minified [${stopTimer(timer.minify)}]`);
  timer.hashes = performance.now();
  const cssHashes = new Map();
  for (const id of Object.keys(buildState)) {
    if (!id.includes("[HASH].css"))
      continue;
    const hash = shorthash.unique(buildState[id].contents);
    const newID = id.replace(/\[HASH\]/, hash);
    cssHashes.set(id, newID);
    buildState[newID] = buildState[id];
    delete buildState[id];
  }
  debug(logging, "css", `built hashes [${stopTimer(timer.hashes)}]`);
  timer.html = performance.now();
  await Promise.all(Object.keys(buildState).map(async (id) => {
    if (buildState[id].contentType !== "text/html")
      return;
    const $ = cheerio.load(buildState[id].contents);
    const pageCSS = new Set();
    $("link[href]").each((i, el) => {
      const srcPath = getSrcPath(id, {astroConfig});
      const oldHref = getDistPath($(el).attr("href") || "", {astroConfig, srcPath});
      const newHref = cssMap.get(oldHref);
      if (newHref) {
        if (pageCSS.has(newHref)) {
          $(el).remove();
        } else {
          $(el).attr("href", cssHashes.get(newHref) || "");
          pageCSS.add(newHref);
        }
        $(el).attr("rel", "stylesheet");
        $(el).attr("type", "text/css");
      }
    });
    buildState[id].contents = $.html();
  }));
  debug(logging, "css", `parsed html [${stopTimer(timer.html)}]`);
}
export {
  bundleCSS
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2J1aWxkL2J1bmRsZS9jc3MudHMiXSwKICAibWFwcGluZ3MiOiAiQUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQSxNQUFNLGFBQWE7QUFnQm5CLHlCQUFnQztBQUFBLEVBQzlCO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsR0FNZ0I7QUFDaEIsUUFBTSxRQUFnQztBQUN0QyxRQUFNLFNBQVMsSUFBSTtBQUduQixRQUFNLFNBQVMsWUFBWTtBQUMzQixRQUFNLGNBQWMsT0FBTyxLQUFLO0FBQ2hDLGNBQVksS0FBSyxDQUFDLEdBQUcsTUFBTSxFQUFFLGNBQWMsR0FBRyxNQUFNLENBQUUsU0FBUztBQUMvRCxhQUFXLFdBQVcsYUFBYTtBQUNqQyxVQUFNLENBQUUsT0FBUSxRQUFRO0FBQ3hCLGVBQVcsVUFBVSxJQUFJLFFBQVE7QUFDL0IsVUFBSSxDQUFDLGtCQUFrQixLQUFLLFNBQVM7QUFBQSxpQkFFMUIsT0FBTyxJQUFJLFNBQVM7QUFFN0IsZUFBTyxJQUFJLFFBQVE7QUFBQSxhQUNkO0FBRUwsZUFBTyxJQUFJLFFBQVEsWUFBWSxRQUFRLFFBQVEsVUFBVSxJQUFJLFFBQVEsT0FBTyxNQUFNO0FBQUE7QUFBQTtBQUFBO0FBTXhGLFFBQU0sU0FBUyxZQUFZO0FBRTNCLGFBQVcsTUFBTSxPQUFPLFFBQVE7QUFDOUIsVUFBTSxTQUFTLE9BQU8sSUFBSTtBQUcxQixRQUFJLENBQUMsV0FBVyxTQUFTO0FBQ3ZCLGlCQUFXLFVBQVU7QUFBQSxRQUNuQixTQUFTLFdBQVcsSUFBSSxDQUFFO0FBQUEsUUFDMUIsVUFBVTtBQUFBLFFBQ1YsYUFBYTtBQUFBLFFBQ2IsVUFBVTtBQUFBO0FBQUE7QUFLZCxJQUFDLFdBQVcsUUFBZ0IsWUFBWSxPQUFPLFNBQVMsV0FBVyxJQUFJLFlBQVksV0FBVyxJQUFJLFNBQVMsU0FBUyxVQUFVLFdBQVcsSUFBSTtBQUM3SSxXQUFPLFdBQVc7QUFBQTtBQUVwQixRQUFNLFNBQVMsT0FBTyxZQUFZLFVBQVUsTUFBTTtBQUdsRCxRQUFNLFNBQVMsWUFBWTtBQUMzQixRQUFNLFFBQVEsSUFDWixPQUFPLEtBQUssWUFBWSxJQUFJLE9BQU8sT0FBTztBQUN4QyxRQUFJLFdBQVcsSUFBSSxnQkFBZ0I7QUFBWTtBQUMvQyxVQUFNLENBQUUsUUFBUyxNQUFNLFFBQVEsVUFBVSxXQUFXLElBQUksU0FBUyxZQUFZO0FBQUEsTUFDM0UsUUFBUTtBQUFBLE1BQ1IsUUFBUTtBQUFBO0FBRVYsZUFBVyxJQUFJLFdBQVc7QUFBQTtBQUc5QixRQUFNLFNBQVMsT0FBTyxhQUFhLFVBQVUsTUFBTTtBQUduRCxRQUFNLFNBQVMsWUFBWTtBQUMzQixRQUFNLFlBQVksSUFBSTtBQUN0QixhQUFXLE1BQU0sT0FBTyxLQUFLLGFBQWE7QUFDeEMsUUFBSSxDQUFDLEdBQUcsU0FBUztBQUFlO0FBRWhDLFVBQU0sT0FBTyxVQUFVLE9BQU8sV0FBVyxJQUFJO0FBQzdDLFVBQU0sUUFBUSxHQUFHLFFBQVEsWUFBWTtBQUNyQyxjQUFVLElBQUksSUFBSTtBQUNsQixlQUFXLFNBQVMsV0FBVztBQUMvQixXQUFPLFdBQVc7QUFBQTtBQUVwQixRQUFNLFNBQVMsT0FBTyxpQkFBaUIsVUFBVSxNQUFNO0FBR3ZELFFBQU0sT0FBTyxZQUFZO0FBQ3pCLFFBQU0sUUFBUSxJQUNaLE9BQU8sS0FBSyxZQUFZLElBQUksT0FBTyxPQUFPO0FBQ3hDLFFBQUksV0FBVyxJQUFJLGdCQUFnQjtBQUFhO0FBRWhELFVBQU0sSUFBSSxRQUFRLEtBQUssV0FBVyxJQUFJO0FBQ3RDLFVBQU0sVUFBVSxJQUFJO0FBQ3BCLE1BQUUsY0FBYyxLQUFLLENBQUMsR0FBRyxPQUFPO0FBQzlCLFlBQU0sVUFBVSxXQUFXLElBQUksQ0FBRTtBQUNqQyxZQUFNLFVBQVUsWUFBWSxFQUFFLElBQUksS0FBSyxXQUFXLElBQUksQ0FBRSxhQUFhO0FBQ3JFLFlBQU0sVUFBVSxPQUFPLElBQUk7QUFDM0IsVUFBSSxTQUFTO0FBRVgsWUFBSSxRQUFRLElBQUksVUFBVTtBQUN4QixZQUFFLElBQUk7QUFBQSxlQUNEO0FBQ0wsWUFBRSxJQUFJLEtBQUssUUFBUSxVQUFVLElBQUksWUFBWTtBQUM3QyxrQkFBUSxJQUFJO0FBQUE7QUFHZCxVQUFFLElBQUksS0FBSyxPQUFPO0FBQ2xCLFVBQUUsSUFBSSxLQUFLLFFBQVE7QUFBQTtBQUFBO0FBR3ZCLElBQUMsV0FBVyxJQUFZLFdBQVcsRUFBRTtBQUFBO0FBR3pDLFFBQU0sU0FBUyxPQUFPLGdCQUFnQixVQUFVLE1BQU07QUFBQTsiLAogICJuYW1lcyI6IFtdCn0K
