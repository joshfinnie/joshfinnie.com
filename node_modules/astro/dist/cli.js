import * as colors from "kleur/colors";
import {promises as fsPromises} from "fs";
import yargs from "yargs-parser";
import {loadConfig} from "./config.js";
import {build} from "./build.js";
import devServer from "./dev.js";
import {preview} from "./preview.js";
import {reload} from "./reload.js";
const {readFile} = fsPromises;
const buildAndExit = async (astroConfig) => {
  const ret = await build(astroConfig);
  process.exit(ret);
};
const reloadAndExit = async () => {
  const ret = await reload();
  process.exit(ret);
};
function resolveArgs(flags) {
  const options = {
    projectRoot: typeof flags.projectRoot === "string" ? flags.projectRoot : void 0,
    site: typeof flags.site === "string" ? flags.site : void 0,
    sitemap: typeof flags.sitemap === "boolean" ? flags.sitemap : void 0,
    port: typeof flags.port === "number" ? flags.port : void 0,
    config: typeof flags.config === "string" ? flags.config : void 0
  };
  if (flags.version) {
    return {cmd: "version", options};
  } else if (flags.help) {
    return {cmd: "help", options};
  }
  const cmd = flags._[2];
  switch (cmd) {
    case "dev":
      return {cmd: "dev", options};
    case "build":
      return {cmd: "build", options};
    case "preview":
      return {cmd: "preview", options};
    default:
      if (flags.reload) {
        return {cmd: "reload", options};
      }
      return {cmd: "help", options};
  }
}
function printHelp() {
  console.error(`  ${colors.bold("astro")} - Futuristic web development tool.

  ${colors.bold("Commands:")}
  astro dev             Run Astro in development mode.
  astro build           Build a pre-compiled production version of your site.
  astro preview         Preview your build locally before deploying.

  ${colors.bold("Flags:")}
  --config <path>       Specify the path to the Astro config file.
  --project-root <path> Specify the path to the project root folder.
  --no-sitemap          Disable sitemap generation (build only).
  --reload              Clean the cache, reinstalling dependencies.
  --verbose             Enable verbose logging
  --silent              Disable logging
  --version             Show the version number and exit.
  --help                Show this help message.
`);
}
async function printVersion() {
  const pkg = JSON.parse(await readFile(new URL("../package.json", import.meta.url), "utf-8"));
  console.error(pkg.version);
}
function mergeCLIFlags(astroConfig, flags) {
  if (typeof flags.sitemap === "boolean")
    astroConfig.buildOptions.sitemap = flags.sitemap;
  if (typeof flags.site === "string")
    astroConfig.buildOptions.site = flags.site;
  if (typeof flags.port === "number")
    astroConfig.devOptions.port = flags.port;
  if (typeof flags.hostname === "string")
    astroConfig.devOptions.hostname = flags.hostname;
}
async function runCommand(rawRoot, cmd, options) {
  try {
    const projectRoot = options.projectRoot || rawRoot;
    const astroConfig = await loadConfig(projectRoot, options.config);
    mergeCLIFlags(astroConfig, options);
    return cmd(astroConfig, options);
  } catch (err) {
    console.error(colors.red(err.toString() || err));
    process.exit(1);
  }
}
const cmdMap = new Map([
  ["build", buildAndExit],
  ["dev", devServer],
  ["preview", preview],
  ["reload", reloadAndExit]
]);
async function cli(args) {
  const flags = yargs(args);
  const state = resolveArgs(flags);
  switch (state.cmd) {
    case "help": {
      printHelp();
      process.exit(1);
      break;
    }
    case "version": {
      await printVersion();
      process.exit(0);
      break;
    }
    case "reload": {
      await reloadAndExit();
      break;
    }
    case "build":
    case "preview":
    case "dev": {
      if (flags.reload) {
        await reload();
      }
      const cmd = cmdMap.get(state.cmd);
      if (!cmd)
        throw new Error(`Error running ${state.cmd}`);
      runCommand(flags._[3], cmd, state.options);
      break;
    }
  }
}
export {
  cli
};
//# sourceMappingURL=data:application/json;base64,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
