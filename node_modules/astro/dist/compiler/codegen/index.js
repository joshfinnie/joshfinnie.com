var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import eslexer from "es-module-lexer";
import esbuild from "esbuild";
import path from "path";
import astroParser from "@astrojs/parser";
import {walk, asyncWalk} from "estree-walker";
import _babelGenerator from "@babel/generator";
import babelParser from "@babel/parser";
import {codeFrameColumns} from "@babel/code-frame";
import * as babelTraverse from "@babel/traverse";
import {error, warn, parseError} from "../../logger.js";
import {yellow} from "kleur/colors";
import {isComponentTag, isCustomElementTag, positionAt} from "../utils.js";
import {warnIfRelativeStringLiteral} from "./utils.js";
import {renderMarkdown} from "@astrojs/markdown-support";
import {camelCase} from "camel-case";
import {transform} from "../transform/index.js";
import {PRISM_IMPORT} from "../transform/prism.js";
import {nodeBuiltinsSet} from "../../node_builtins.js";
import {readFileSync} from "fs";
import {fileURLToPath, pathToFileURL} from "url";
const {parse, FEATURE_CUSTOM_ELEMENT} = astroParser;
const traverse = babelTraverse.default.default;
const babelGenerator = _babelGenerator.default;
const {transformSync} = esbuild;
const hydrationDirectives = new Set(["client:load", "client:idle", "client:visible", "client:media", "client:only"]);
function findHydrationAttributes(attrs) {
  let method;
  let value;
  for (const [key, val] of Object.entries(attrs)) {
    if (hydrationDirectives.has(key)) {
      method = key.slice(7);
      value = val === "true" ? void 0 : val;
    }
  }
  return {method, value};
}
async function getAttributes(nodeName, attrs, state, compileOptions) {
  const isPage = state.filename.startsWith(fileURLToPath(compileOptions.astroConfig.pages));
  let result = {};
  for (const attr of attrs) {
    if (attr.type === "Spread") {
      const code = await compileExpression(attr.expression, state, compileOptions);
      if (code) {
        result[`...(${code})`] = "";
      }
      continue;
    }
    if (attr.value === true) {
      result[attr.name] = JSON.stringify(attr.value);
      continue;
    }
    if (attr.value === false || attr.value === void 0) {
      continue;
    }
    if (attr.value.length === 0) {
      result[attr.name] = '""';
      continue;
    }
    if (attr.value.length > 1) {
      result[attr.name] = "(" + attr.value.map((v) => {
        if (v.content) {
          return v.content;
        } else {
          return JSON.stringify(getTextFromAttribute(v));
        }
      }).join("+") + ")";
      continue;
    }
    const val = attr.value[0];
    if (!val) {
      result[attr.name] = "(" + val + ")";
      continue;
    }
    switch (val.type) {
      case "MustacheTag": {
        const code = await compileExpression(val.expression, state, compileOptions);
        if (code) {
          result[attr.name] = "(" + code + ")";
        }
        continue;
      }
      case "Text": {
        let text = getTextFromAttribute(val);
        if (!isPage) {
          warnIfRelativeStringLiteral(compileOptions.logging, nodeName, attr, text);
        }
        result[attr.name] = JSON.stringify(text);
        continue;
      }
      case "AttributeShorthand":
        result[attr.name] = "(" + attr.name + ")";
        continue;
      default:
        throw new Error(`UNKNOWN: ${val.type}`);
    }
  }
  return result;
}
function getTextFromAttribute(attr) {
  switch (attr.type) {
    case "Text": {
      if (attr.raw !== void 0) {
        return attr.raw;
      }
      if (attr.data !== void 0) {
        return attr.data;
      }
      break;
    }
    case "MustacheTag": {
      return attr.expression.codeChunks[0];
    }
  }
  throw new Error(`Unknown attribute type ${attr.type}`);
}
function generateAttributes(attrs) {
  let result = "{";
  for (const [key, val] of Object.entries(attrs)) {
    if (hydrationDirectives.has(key)) {
      continue;
    } else if (key.startsWith("...")) {
      result += key + ",";
    } else {
      result += JSON.stringify(key) + ":" + val + ",";
    }
  }
  result += `[__astroContext]:props[__astroContext]`;
  return result + "}";
}
function getComponentUrl(astroConfig, url, parentUrl) {
  const componentExt = path.extname(url);
  const ext = PlainExtensions.has(componentExt) ? ".js" : `${componentExt}.js`;
  const outUrl = new URL(url, parentUrl);
  return "/_astro/" + outUrl.href.replace(astroConfig.projectRoot.href, "").replace(/\.[^.]+$/, ext);
}
const PlainExtensions = new Set([".js", ".jsx", ".ts", ".tsx"]);
function getComponentWrapper(_name, hydration, {url, importSpecifier}, opts) {
  const {astroConfig, filename, compileOptions} = opts;
  let name = _name;
  let method = hydration.method;
  if (name.indexOf(":") > 0) {
    const [legacyName, legacyMethod] = _name.split(":");
    name = legacyName;
    method = legacyMethod;
    const shortname = path.posix.relative(compileOptions.astroConfig.projectRoot.pathname, filename);
    warn(compileOptions.logging, shortname, yellow(`Deprecation warning: Partial hydration now uses a directive syntax. Please update to "<${name} client:${method} />"`));
  }
  if (isCustomElementTag(_name)) {
    return {
      wrapper: `__astro_component(...__astro_element_registry.astroComponentArgs("${name}", ${JSON.stringify({hydrate: method, displayName: _name})}))`,
      wrapperImports: [
        `import {AstroElementRegistry} from 'astro/dist/internal/element-registry.js';`,
        `import {__astro_component} from 'astro/dist/internal/__astro_component.js';`
      ]
    };
  } else {
    const getComponentExport = () => {
      switch (importSpecifier.type) {
        case "ImportDefaultSpecifier":
          return {value: "default"};
        case "ImportSpecifier": {
          if (importSpecifier.imported.type === "Identifier") {
            return {value: importSpecifier.imported.name};
          }
          return {value: importSpecifier.imported.value};
        }
        case "ImportNamespaceSpecifier": {
          const [_, value] = _name.split(".");
          return {value};
        }
      }
    };
    let metadata = "";
    if (method) {
      const componentUrl = getComponentUrl(astroConfig, url, pathToFileURL(filename));
      const componentExport = getComponentExport();
      metadata = `{ hydrate: "${method}", displayName: "${name}", componentUrl: "${componentUrl}", componentExport: ${JSON.stringify(componentExport)}, value: ${hydration.value || "null"} }`;
      if (method === "only") {
        name = "Fragment";
      }
    } else {
      metadata = `{ hydrate: undefined, displayName: "${name}", value: ${hydration.value || "null"} }`;
    }
    return {
      wrapper: `__astro_component(${name}, ${metadata})`,
      wrapperImports: [`import {__astro_component} from 'astro/dist/internal/__astro_component.js';`]
    };
  }
}
async function compileExpression(node, state, compileOptions) {
  var _a;
  const children = await Promise.all(((_a = node.children) != null ? _a : []).map((child) => compileHtml(child, state, compileOptions)));
  let raw = "";
  let nextChildIndex = 0;
  for (const chunk of node.codeChunks) {
    raw += chunk;
    if (nextChildIndex < children.length) {
      raw += children[nextChildIndex++];
    }
  }
  const location = {start: node.start, end: node.end};
  let code = transpileExpressionSafe("(" + raw + ")", {state, compileOptions, location});
  if (code === null)
    throw new Error(`Unable to compile expression`);
  code = code.trim().replace(/\;$/, "");
  return code;
}
function transpileExpressionSafe(raw, {state, compileOptions, location}) {
  try {
    let {code} = transformSync(raw, {
      loader: "tsx",
      jsxFactory: "h",
      jsxFragment: "Fragment",
      charset: "utf8"
    });
    return code;
  } catch ({errors}) {
    const err = new Error();
    const e = errors[0];
    err.filename = state.filename;
    const text = readFileSync(state.filename).toString();
    const start = positionAt(location.start, text);
    start.line += e.location.line;
    start.character += e.location.column + 1;
    err.start = {line: start.line, column: start.character};
    const end = __spreadValues({}, start);
    end.character += e.location.length;
    const frame = codeFrameColumns(text, {
      start: {line: start.line, column: start.character},
      end: {line: end.line, column: end.character}
    });
    err.frame = frame;
    err.message = e.text;
    parseError(compileOptions.logging, err);
    return null;
  }
}
function compileModule(ast, module, state, compileOptions) {
  var _a, _b, _c;
  const {astroConfig} = compileOptions;
  const {filename} = state;
  const componentImports = [];
  const componentProps = [];
  const componentExports = [];
  let script = "";
  let propsStatement = "";
  let getStaticPaths = "";
  if (module) {
    const parseOptions = {
      sourceType: "module",
      plugins: ["jsx", "typescript", "topLevelAwait", "throwExpressions"]
    };
    let parseResult;
    try {
      parseResult = babelParser.parse(module.content, parseOptions);
    } catch (err) {
      const location2 = {start: err.loc};
      const frame = codeFrameColumns(module.content, location2);
      err.frame = frame;
      err.filename = state.filename;
      err.start = err.loc;
      throw err;
    }
    if (/Astro\s*\.\s*fetchContent/.test(module.content)) {
      state.importStatements.add(`import {fetchContent} from 'astro/dist/internal/fetch-content.js';
`);
      traverse(parseResult, {
        enter({node}) {
          if (node.type !== "CallExpression" || node.callee.type !== "MemberExpression" || node.callee.object.name !== "Astro" || node.callee.property.name !== "fetchContent") {
            return;
          }
          if (node.arguments[0].type !== "StringLiteral") {
            throw new Error(`[Astro.fetchContent] Only string literals allowed, ex: \`Astro.fetchContent('./post/*.md')\`
  ${state.filename}`);
          }
          node.arguments = [
            {
              type: "CallExpression",
              callee: {
                type: "MemberExpression",
                object: {type: "MetaProperty", meta: {type: "Identifier", name: "import"}, property: {type: "Identifier", name: "meta"}},
                property: {type: "Identifier", name: "globEager"},
                computed: false
              },
              arguments: node.arguments
            }
          ];
        }
      });
    }
    const program = parseResult.program;
    const {body} = program;
    let i = body.length;
    while (--i >= 0) {
      const node = body[i];
      switch (node.type) {
        case "ExportNamedDeclaration": {
          if (!node.declaration)
            break;
          if (node.declaration.type === "VariableDeclaration") {
            const declaration = node.declaration.declarations[0];
            if (declaration.id.name === "__layout" || declaration.id.name === "__content") {
              componentExports.push(node);
            } else {
              componentProps.push(declaration);
            }
          } else if (node.declaration.type === "FunctionDeclaration") {
            if (!node.declaration.id || node.declaration.id.name !== "getStaticPaths")
              break;
            getStaticPaths = babelGenerator(node).code;
          }
          body.splice(i, 1);
          break;
        }
        case "FunctionDeclaration": {
          if ((_a = node.id) == null ? void 0 : _a.name) {
            state.declarations.add((_b = node.id) == null ? void 0 : _b.name);
          }
          break;
        }
        case "ImportDeclaration": {
          componentImports.push(node);
          body.splice(i, 1);
          break;
        }
        case "VariableDeclaration": {
          for (const declaration of node.declarations) {
            if (declaration.id.type === "Identifier") {
              state.declarations.add(declaration.id.name);
            }
          }
          break;
        }
      }
    }
    for (const componentImport of componentImports) {
      const importUrl = componentImport.source.value;
      if (nodeBuiltinsSet.has(importUrl)) {
        throw new Error(`Node builtins must be prefixed with 'node:'. Use node:${importUrl} instead.`);
      }
      for (const specifier of componentImport.specifiers) {
        const componentName = specifier.local.name;
        state.components.set(componentName, {
          importSpecifier: specifier,
          url: importUrl
        });
        if (!state.componentImports.has(componentName)) {
          state.componentImports.set(componentName, []);
        }
        const {start: start2, end: end2} = componentImport;
        (_c = state.componentImports.get(componentName)) == null ? void 0 : _c.push(module.content.slice(start2 || void 0, end2 || void 0));
      }
      const {start, end} = componentImport;
      if (ast.meta.features & FEATURE_CUSTOM_ELEMENT && componentImport.specifiers.length === 0) {
        const moduleImportName = camelCase(importUrl + "Module");
        state.importStatements.add(`import * as ${moduleImportName} from '${importUrl}';
`);
        state.customElementCandidates.set(moduleImportName, getComponentUrl(astroConfig, importUrl, pathToFileURL(filename)));
      } else {
        state.importStatements.add(module.content.slice(start || void 0, end || void 0));
      }
    }
    for (const componentImport of componentExports) {
      const {start, end} = componentImport;
      state.exportStatements.add(module.content.slice(start || void 0, end || void 0));
    }
    if (componentProps.length > 0) {
      const shortname = path.posix.relative(compileOptions.astroConfig.projectRoot.pathname, state.filename);
      const props = componentProps.map((prop) => {
        var _a2;
        return (_a2 = prop.id) == null ? void 0 : _a2.name;
      }).filter((v) => v);
      warn(compileOptions.logging, shortname, yellow(`
Defining props with "export" has been removed! Please see https://github.com/snowpackjs/astro/blob/main/packages/astro/CHANGELOG.md#0150
Please update your code to use:

const { ${props.join(", ")} } = Astro.props;
`));
    }
    script = propsStatement + babelGenerator(program).code;
    const location = {start: module.start, end: module.end};
    let transpiledScript = transpileExpressionSafe(script, {state, compileOptions, location});
    if (transpiledScript === null)
      throw new Error(`Unable to compile script`);
    script = transpiledScript;
  }
  return {
    script,
    getStaticPaths: getStaticPaths || void 0
  };
}
function compileCss(style, state) {
  walk(style, {
    enter(node) {
      if (node.type === "Style") {
        state.css.push(node.content.styles);
        this.skip();
      }
    },
    leave(node) {
      if (node.type === "Style") {
        this.remove();
      }
    }
  });
}
function dedent(str) {
  var _a;
  let arr = str.match(/^[ \t]*(?=\S)/gm);
  let first = !!arr && ((_a = arr.find((x) => x.length > 0)) == null ? void 0 : _a.length);
  return !arr || !first ? str : str.replace(new RegExp(`^[ \\t]{0,${first}}`, "gm"), "");
}
const FALSY_EXPRESSIONS = new Set(["false", "null", "undefined", "void 0"]);
function isFrontmatterDefinedComponent(componentName, componentInfo, state) {
  let hasVariableDeclaration = state.declarations.has(componentName);
  let isNotImported = !componentInfo;
  return hasVariableDeclaration && isNotImported;
}
function isFragmentComponent(componentName) {
  return componentName === "Fragment";
}
async function compileHtml(enterNode, state, compileOptions) {
  return new Promise((resolve) => {
    const {components, css, importStatements, exportStatements, filename, fileID} = state;
    const {astroConfig} = compileOptions;
    let paren = -1;
    let buffers = {
      out: "",
      markdown: ""
    };
    let curr = "out";
    async function pushMarkdownToBuffer() {
      const md = buffers.markdown;
      const {markdownOptions = {}} = astroConfig;
      if (!md.trim()) {
        buffers.out += "," + md;
        buffers.markdown = "";
        curr = "out";
        return;
      }
      const {$scope: scopedClassName} = state.markers.insideMarkdown;
      let {content: rendered} = await renderMarkdown(dedent(md), __spreadProps(__spreadValues({}, markdownOptions), {
        $: {scopedClassName: scopedClassName && scopedClassName.slice(1, -1)}
      }));
      const ast = parse(rendered);
      await transform(ast, {
        compileOptions,
        filename,
        fileID
      });
      const result = await compileHtml(ast.html, __spreadProps(__spreadValues({}, state), {markers: {insideMarkdown: false}}), compileOptions);
      buffers.out += "," + result;
      buffers.markdown = "";
      curr = "out";
    }
    asyncWalk(enterNode, {
      async enter(node, parent) {
        switch (node.type) {
          case "Expression": {
            let code = await compileExpression(node, state, compileOptions);
            if (FALSY_EXPRESSIONS.has(code)) {
              this.skip();
              break;
            }
            if (code !== "") {
              if (state.markers.insideMarkdown) {
                buffers[curr] += `{${code}}`;
              } else {
                buffers[curr] += `,(${code})`;
              }
            }
            this.skip();
            break;
          }
          case "MustacheTag":
            if (state.markers.insideMarkdown) {
              if (curr === "out")
                curr = "markdown";
            }
            return;
          case "Comment":
            return;
          case "Fragment": {
            buffers[curr] += `h(Fragment, null,`;
            break;
          }
          case "SlotTemplate": {
            buffers[curr] += `h(Fragment, null, children`;
            paren++;
            return;
          }
          case "Slot":
          case "Head":
          case "InlineComponent": {
            switch (node.name) {
              case "Prism": {
                if (!importStatements.has(PRISM_IMPORT)) {
                  importStatements.add(PRISM_IMPORT);
                }
                if (!components.has("Prism")) {
                  components.set("Prism", {
                    importSpecifier: {
                      type: "ImportDefaultSpecifier",
                      local: {type: "Identifier", name: "Prism"}
                    },
                    url: "astro/components/Prism.astro"
                  });
                }
                break;
              }
            }
          }
          case "Title":
          case "Element": {
            const name = node.name;
            if (!name) {
              throw new Error("AHHHH");
            }
            try {
              const attributes = await getAttributes(name, node.attributes, state, compileOptions);
              const hydrationAttributes = findHydrationAttributes(attributes);
              buffers.out += buffers.out === "" ? "" : ",";
              if (node.type === "Slot") {
                state.importStatements.add(`import { __astro_slot } from 'astro/dist/internal/__astro_slot.js';`);
                buffers[curr] += `h(__astro_slot, ${generateAttributes(attributes)}, children`;
                paren++;
                return;
              }
              if (!isComponentTag(name)) {
                if (curr === "markdown") {
                  await pushMarkdownToBuffer();
                }
                if (attributes.slot) {
                  state.importStatements.add(`import { __astro_slot_content } from 'astro/dist/internal/__astro_slot.js';`);
                  buffers[curr] += `h(__astro_slot_content, { name: ${attributes.slot} },`;
                  paren++;
                }
                if (attributes.hoist) {
                  if (attributes.src) {
                    state.hoistedScripts.push({
                      src: attributes.src.substr(1, attributes.src.length - 2)
                    });
                  } else if (node.children && node.children.length === 1 && node.children[0].type === "Text") {
                    state.hoistedScripts.push({
                      content: node.children[0].data
                    });
                  }
                  this.skip();
                  return;
                }
                buffers[curr] += `h("${name}", ${generateAttributes(attributes)},`;
                paren++;
                return;
              }
              const [componentName, _componentKind] = name.split(":");
              let componentInfo = components.get(componentName);
              if (/\./.test(componentName)) {
                const [componentNamespace] = componentName.split(".");
                componentInfo = components.get(componentNamespace);
              }
              if (isFrontmatterDefinedComponent(componentName, componentInfo, state) && !isCustomElementTag(componentName) || isFragmentComponent(componentName)) {
                if (hydrationAttributes.method) {
                  throw new Error(`Unable to hydrate "${componentName}" because it is statically defined in the frontmatter script. Hydration directives may only be used on imported components.`);
                }
                if (curr === "markdown") {
                  await pushMarkdownToBuffer();
                }
                if (attributes.slot) {
                  state.importStatements.add(`import { __astro_slot_content } from 'astro/dist/internal/__astro_slot.js';`);
                  buffers[curr] += `h(__astro_slot_content, { name: ${attributes.slot} },`;
                  paren++;
                }
                buffers[curr] += `h(${componentName}, ${generateAttributes(attributes)},`;
                paren++;
                return;
              } else if (!componentInfo && !isCustomElementTag(componentName)) {
                throw new Error(`Unable to render "${componentName}" because it is undefined
  ${state.filename}`);
              }
              if (componentName === "Markdown") {
                const {$scope} = attributes != null ? attributes : {};
                state.markers.insideMarkdown = typeof state.markers.insideMarkdown === "object" ? {$scope, count: state.markers.insideMarkdown.count + 1} : {$scope, count: 1};
                const keys = Object.keys(attributes).filter((attr) => attr !== "$scope");
                if (keys.length > 0) {
                  if (curr === "markdown") {
                    await pushMarkdownToBuffer();
                  }
                  buffers[curr] += `,${componentName}.__render(${generateAttributes(attributes)}),`;
                }
                curr = "markdown";
                return;
              }
              const {wrapper, wrapperImports} = getComponentWrapper(name, hydrationAttributes, componentInfo != null ? componentInfo : {}, {astroConfig, filename, compileOptions});
              if (wrapperImports) {
                for (let wrapperImport of wrapperImports) {
                  importStatements.add(wrapperImport);
                }
              }
              if (hydrationAttributes.method === "only") {
                const componentImports = state.componentImports.get(componentName) || [];
                componentImports.map((componentImport) => state.importStatements.delete(componentImport));
              }
              if (curr === "markdown") {
                await pushMarkdownToBuffer();
              }
              if (attributes.slot) {
                state.importStatements.add(`import { __astro_slot_content } from 'astro/dist/internal/__astro_slot.js';`);
                buffers[curr] += `h(__astro_slot_content, { name: ${attributes.slot} },`;
                paren++;
              }
              paren++;
              buffers[curr] += `h(${wrapper}, ${generateAttributes(attributes)}`;
            } catch (err) {
              paren--;
              const rel = filename.replace(astroConfig.projectRoot.pathname, "");
              error(compileOptions.logging, rel, err.toString());
            }
            return;
          }
          case "Attribute":
          case "Spread": {
            this.skip();
            return;
          }
          case "Style": {
            css.push(node.content.styles);
            this.skip();
            return;
          }
          case "CodeSpan":
          case "CodeFence": {
            if (state.markers.insideMarkdown) {
              if (curr === "out")
                curr = "markdown";
              buffers[curr] += node.raw;
              return;
            }
            buffers[curr] += "," + JSON.stringify(node.data);
            return;
          }
          case "Text": {
            let text = getTextFromAttribute(node);
            if (state.markers.insideMarkdown) {
              if (curr === "out")
                curr = "markdown";
              buffers[curr] += text;
              return;
            }
            if (parent.name !== "Markdown" && !text.trim()) {
              return;
            }
            if (parent.name === "code") {
              text = node.raw.replace(/ASTRO_ESCAPED_LEFT_CURLY_BRACKET\0/g, "{");
            }
            buffers[curr] += "," + JSON.stringify(text);
            return;
          }
          default:
            throw new Error("Unexpected (enter) node type: " + node.type);
        }
      },
      async leave(node, parent, prop, index) {
        switch (node.type) {
          case "Fragment": {
            buffers[curr] += `)`;
            break;
          }
          case "Text":
          case "Attribute":
          case "Spread":
          case "Comment":
          case "Expression":
          case "MustacheTag":
          case "CodeSpan":
          case "CodeFence":
            return;
          case "SlotTemplate":
          case "Slot":
          case "Head":
          case "Body":
          case "Title":
          case "Element": {
            if (curr === "markdown") {
              await pushMarkdownToBuffer();
            }
            if (node.attributes.find((attr) => attr.name === "slot")) {
              buffers.out += ")";
              paren--;
            }
            if (paren !== -1) {
              buffers.out += ")";
              paren--;
            }
            return;
          }
          case "InlineComponent": {
            if (node.name === "Markdown") {
              state.markers.insideMarkdown.count--;
              if (state.markers.insideMarkdown.count <= 0) {
                state.markers.insideMarkdown = false;
              }
              const hasAttrs = node.attributes.filter(({name}) => name !== "$scope").length > 0;
              if (hasAttrs) {
                return;
              }
            }
            if (curr === "markdown" && buffers.markdown !== "") {
              await pushMarkdownToBuffer();
              if (!state.markers.insideMarkdown) {
                return;
              }
            }
            if (node.attributes.find((attr) => attr.name === "slot")) {
              buffers.out += ")";
              paren--;
            }
            if (paren !== -1) {
              buffers.out += ")";
              paren--;
            }
            return;
          }
          case "Style": {
            this.remove();
            return;
          }
          default:
            throw new Error("Unexpected (leave) node type: " + node.type);
        }
      }
    }).then(() => {
      const content = buffers.out.replace(/^\,/, "").replace(/\,\)/g, ")").replace(/\,+/g, ",").replace(/\)h/g, "),h");
      buffers.out = "";
      buffers.markdown = "";
      return resolve(content);
    });
  });
}
async function codegen(ast, {compileOptions, filename, fileID}) {
  await eslexer.init;
  const state = {
    filename,
    fileID,
    components: new Map(),
    css: [],
    hoistedScripts: [],
    markers: {
      insideMarkdown: false
    },
    declarations: new Set(),
    importStatements: new Set(),
    exportStatements: new Set(),
    componentImports: new Map(),
    customElementCandidates: new Map()
  };
  const {script, getStaticPaths} = compileModule(ast, ast.module, state, compileOptions);
  (ast.css || []).map((css) => compileCss(css, state));
  const html = await compileHtml(ast.html, state, compileOptions);
  return {
    script,
    imports: Array.from(state.importStatements),
    exports: Array.from(state.exportStatements),
    html,
    css: state.css.length ? state.css.join("\n\n") : void 0,
    hoistedScripts: state.hoistedScripts,
    components: Array.from(state.components.keys()),
    getStaticPaths,
    hasCustomElements: Boolean(ast.meta.features & FEATURE_CUSTOM_ELEMENT),
    customElementCandidates: state.customElementCandidates
  };
}
export {
  codegen
};
//# sourceMappingURL=data:application/json;base64,
