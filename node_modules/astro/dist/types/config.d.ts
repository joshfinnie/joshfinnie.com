import { z } from 'zod';
import { AstroConfig } from './@types/astro';
export declare const AstroConfigSchema: z.ZodObject<{
    projectRoot: z.ZodEffects<z.ZodDefault<z.ZodOptional<z.ZodString>>, URL>;
    src: z.ZodEffects<z.ZodDefault<z.ZodOptional<z.ZodString>>, URL>;
    pages: z.ZodEffects<z.ZodDefault<z.ZodOptional<z.ZodString>>, URL>;
    public: z.ZodEffects<z.ZodDefault<z.ZodOptional<z.ZodString>>, URL>;
    dist: z.ZodEffects<z.ZodDefault<z.ZodOptional<z.ZodString>>, URL>;
    renderers: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
    markdownOptions: z.ZodDefault<z.ZodOptional<z.ZodObject<{
        footnotes: z.ZodOptional<z.ZodBoolean>;
        gfm: z.ZodOptional<z.ZodBoolean>;
        remarkPlugins: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
        rehypePlugins: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
    }, "strip", z.ZodTypeAny, {
        footnotes?: boolean | undefined;
        gfm?: boolean | undefined;
        remarkPlugins?: any[] | undefined;
        rehypePlugins?: any[] | undefined;
    }, {
        footnotes?: boolean | undefined;
        gfm?: boolean | undefined;
        remarkPlugins?: any[] | undefined;
        rehypePlugins?: any[] | undefined;
    }>>>;
    buildOptions: z.ZodDefault<z.ZodOptional<z.ZodObject<{
        site: z.ZodOptional<z.ZodString>;
        sitemap: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        pageUrlFormat: z.ZodDefault<z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"file">, z.ZodLiteral<"directory">]>>>;
    }, "strip", z.ZodTypeAny, {
        site?: string | undefined;
        sitemap: boolean;
        pageUrlFormat: "file" | "directory";
    }, {
        site?: string | undefined;
        sitemap?: boolean | undefined;
        pageUrlFormat?: "file" | "directory" | undefined;
    }>>>;
    devOptions: z.ZodDefault<z.ZodOptional<z.ZodObject<{
        hostname: z.ZodDefault<z.ZodOptional<z.ZodString>>;
        port: z.ZodEffects<z.ZodOptional<z.ZodNumber>, number>;
        tailwindConfig: z.ZodOptional<z.ZodString>;
        trailingSlash: z.ZodDefault<z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"always">, z.ZodLiteral<"never">, z.ZodLiteral<"ignore">]>>>;
    }, "strip", z.ZodTypeAny, {
        tailwindConfig?: string | undefined;
        port: number;
        hostname: string;
        trailingSlash: "never" | "always" | "ignore";
    }, {
        port?: number | undefined;
        hostname?: string | undefined;
        tailwindConfig?: string | undefined;
        trailingSlash?: "never" | "always" | "ignore" | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    projectRoot: URL;
    src: URL;
    pages: URL;
    public: URL;
    dist: URL;
    renderers: string[];
    markdownOptions: {
        footnotes?: boolean | undefined;
        gfm?: boolean | undefined;
        remarkPlugins?: any[] | undefined;
        rehypePlugins?: any[] | undefined;
    };
    buildOptions: {
        site?: string | undefined;
        sitemap: boolean;
        pageUrlFormat: "file" | "directory";
    };
    devOptions: {
        tailwindConfig?: string | undefined;
        port: number;
        hostname: string;
        trailingSlash: "never" | "always" | "ignore";
    };
}, {
    projectRoot?: string | undefined;
    src?: string | undefined;
    pages?: string | undefined;
    public?: string | undefined;
    dist?: string | undefined;
    renderers?: string[] | undefined;
    markdownOptions?: {
        footnotes?: boolean | undefined;
        gfm?: boolean | undefined;
        remarkPlugins?: any[] | undefined;
        rehypePlugins?: any[] | undefined;
    } | undefined;
    buildOptions?: {
        site?: string | undefined;
        sitemap?: boolean | undefined;
        pageUrlFormat?: "file" | "directory" | undefined;
    } | undefined;
    devOptions?: {
        port?: number | undefined;
        hostname?: string | undefined;
        tailwindConfig?: string | undefined;
        trailingSlash?: "never" | "always" | "ignore" | undefined;
    } | undefined;
}>;
/** Attempt to load an `astro.config.mjs` file */
export declare function loadConfig(rawRoot: string | undefined, configFileName?: string): Promise<AstroConfig>;
