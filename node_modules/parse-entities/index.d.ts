/**
 * Parse entities.
 *
 * @template {typeof globalThis} WarningContext
 * @template {typeof globalThis} ReferenceContext
 * @template {typeof globalThis} TextContext
 * @param {string} value
 * @param {Partial<ParseEntitiesOptions<WarningContext, ReferenceContext, TextContext>>} [options={}]
 */
export function parseEntities<
  WarningContext extends typeof globalThis,
  ReferenceContext extends typeof globalThis,
  TextContext extends typeof globalThis
>(
  value: string,
  options?: Partial<
    ParseEntitiesOptions<WarningContext, ReferenceContext, TextContext>
  >
): string
export type ParseEntitiesOptions<
  WarningContext extends typeof globalThis,
  ReferenceContext extends typeof globalThis,
  TextContext extends typeof globalThis
> = {
  /**
   * Additional character to accept. This allows other characters, without error, when following an ampersand
   */
  additional?: string
  /**
   * Whether to parse `value` as an attribute value
   */
  attribute?: boolean
  /**
   * Whether to allow non-terminated entities. For example, `&copycat` for `Â©cat`. This behaviour is spec-compliant but can lead to unexpected results
   */
  nonTerminated?: boolean
  /**
   * Starting `position` of `value` (`Point` or `Position`). Useful when dealing with values nested in some sort of syntax tree
   */
  position?: Position | Point
  /**
   * Context used when calling `warning`
   */
  warningContext: WarningContext
  /**
   * Warning handler
   */
  warning: WarningHandler<WarningContext>
  /**
   * Context used when calling `reference`
   */
  referenceContext: ReferenceContext
  /**
   * Reference handler
   */
  reference: ReferenceHandler<ReferenceContext>
  /**
   * Context used when calling `text`
   */
  textContext: TextContext
  /**
   * Text handler
   */
  text: TextHandler<TextContext>
}
export type Position = {
  start: Point
  end?: Point
  indent?: number[]
}
export type Point = {
  line: number
  column: number
  offset: number
}
export type WarningHandler<Context extends typeof globalThis> = () => any
export type ReferenceHandler<Context extends typeof globalThis> = () => any
export type TextHandler<Context extends typeof globalThis> = () => any
