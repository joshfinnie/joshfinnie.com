/**
 * Encode `character` according to `options`.
 *
 * @param {number} code
 * @param {number} next
 * @param {FormatSmartOptions} options
 * @returns {string}
 */
export function formatSmart(
  code: number,
  next: number,
  options: FormatSmartOptions
): string
export type FormatSmartOptions = {
  /**
   * Prefer named character references (`&amp;`) where possible (`boolean?`, default: `false`)
   */
  useNamedReferences?: boolean
  /**
   * Prefer the shortest possible reference, if that results in less bytes (`boolean?`, default: `false`). **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`
   */
  useShortestReferences?: boolean
  /**
   * Whether to omit semicolons when possible (`boolean?`, default: `false`). **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier. Omitting semicolons is possible for legacy named references in certain cases, and numeric references in some cases
   */
  omitOptionalSemicolons?: boolean
  /**
   * Only needed when operating dangerously with `omitOptionalSemicolons: true`. Create character references which don’t fail in attributes (`boolean?`, default: `false`).
   */
  attribute?: boolean
}
